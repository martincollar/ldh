<?php
/*
 *
 */

/**
 * hook_menu
 */
function ldh_menu() {
  // TODO: make it more secure ... token ?
  $items['fields_json'] = array(
    'title' => 'Fields json',
    'page callback' => 'ldh_fields_json',
    'access callback' => true,
    'type' => MENU_CALLBACK,
    'file' => 'ldh.json.inc'
  );
  return $items;
}

/**
 * hook_form_ID_alter
 */
function ldh_form_devel_execute_form_alter(&$form, &$form_alter) {

  $form['ldhinfo'] = array(
    '#type' => 'fieldset',
    '#title' => 'LDH info',
    '#collapsible' => true,
    // todo: remember the last setting
    '#collapsed' => true,
    '#weight' => -1,
    '#attributes' => array('class' => array('ldh-functions')),
    );
  // todo : add javascript to enter the clicked function into the textarea
  // try to load this somehow automagically ?
  $functions = array(
    'ldh_pi' => array(
      'call' => 'ldh_pi($bundle, $entityType = "node");',
      'title' => 'Property information',
    ),
    'ldh_efq' => array(
      'call' => 'ldh_efq($bundle, $entityType = "node");',
      'title' => 'Entity field query'
    ),
    'ldh_nw' => array(
      'call' => 'ldh_nw($id);',
      'title' => 'Node wrapper',
    )
  );
  $form['ldhinfo']['functions'] = array(
    '#markup' =>  join("   \n",array_map(
      function ($el) {
        return '<a href="#" title="'. $el['title'] .'">'.$el['call'].'</a>';
      },
      $functions
      )),
    );
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'ldh') . '/js/ldh_devel.js',
  );

  //dpm($form);
}


/**
 * function ldh_cont
 */
function ldh_container() {
  $out['#type'] = 'container';
}

/**
 * array for html tag
 */
function ldh_tagar($val, $tag = 'div') {
  $out = array();
  $out['#tag'] = $tag;
  $out['#type'] = 'html_tag';
  $out['#value'] = $val;
  return $out;
}

/**
 * function ldh_addclass
 */
function ldh_addclass(&$ar, $cl) {
  // check if the attributes are present
  // check if its an array
  // check if it contains classes ()
  // check if the parameter is an array
  $ar['#attributes']['class'][] = $cl;

}

function ldh_setid(&$ar, $id) {
  $ar['#attributes']['id'] = $id;
}

function ldh_setstyle(&$ar, $st) {
  $ar['#attributes']['style'] = $st;
}

/**
 * EntityFieldQuery
 *
 * @param string $bundle
 *
 */
function ldh_efq($bundle, $entityType = 'node'){
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', $entityType)
    ->entityCondition('bundle', $bundle);
  return $query;
}

/**
 * PropertyInfo
 * @todo
 * - combine with info from field_info_fields
 *   - especially ['FIELD_NAME']['field_name']
 */
function ldh_pi($bundle, $entityType = 'node') {
  $ent = entity_create($entityType, array('type' => $bundle));
  $nw = entity_metadata_wrapper($entityType, $ent);
  $pinfo = $nw->getPropertyInfo();
  return $pinfo;
}

function ldh_taxo_addp($term, $vocname, $parent) {

}

/**
 * add a taxonomy term
 * @param string $term
 *   the title of the term to add
 * @param string $vocname
 *   the machine name of the vocabulary
 */
function ldh_taxo_add($term, $vocname, $parentid = 0) {
  // find vid
  $voc = taxonomy_vocabulary_machine_name_load($vocname);
  // create array
  // return tid
  $t = array(
    'vid' => $voc->vid,
    'name' => $term,
  );
  if ($parentid) {
    $t['parent'] = $parentid;
  }
  $term = (object) $t;
  taxonomy_term_save($term);
  return $term->tid;
}

/**
 * node wrapper
 *
 * @param integer $id
 * nid of the node to load
 *
 * @return EntityMetadataWrapper
 * http://drupalcontrib.org/api/drupal/contributions%21entity%21includes%21entity.wrapper.inc/class/EntityMetadataWrapper/7
 */
function ldh_nw($id) {
  $node = node_load($id);
  return entity_metadata_wrapper('node',$node);
}

function ldh_ew($id, $type) {
  $e = end(entity_load($type, array($id)));
  return entity_metadata_wrapper($type,$e);
}



function ldh_create($bundle, $entityType = 'node') {
  $ent = entity_create($entityType, array('type' => $bundle));
  $ew = entity_metadata_wrapper($entityType, $ent);
  return $ew;
}

function ldh_mach_to_tid($mach, $voc, $field ) {
  // find automagically the field ?
  // cache the resulst ? or even the whole list ?
  $type = 'taxonomy_term';
  $q = ldh_efq($voc,$type);
  // find the column name, too :)
  $r = $q->fieldCondition($field, 'value', $mach)
    ->execute();
  if (isset($r[$type])) {
    return(end(array_keys($r[$type])));
  }

}

/**
 * $akce = 19;
 * $r = ldh_efq('ucast','ucast')->fieldCondition('field_uc_akce', 'target_id', $akce)
 *   ->execute();
 * dpm($r);
 * $l = new LdhEfr('ucast','ucast');
 * $l->fieldCo('field_uc_akce',$akce,'=','target_id');
 * dpm($l->getResult());
 * dpm($l->getAllIDs());
 * dpm($l->getOneID());
 *
 * @todo make sure execute() is only ran once - record it somewhere
 * @todo think about a "no results behaviour" - now its only false
 */
class LdhEfr{
  var $efq;
  var $result;
  public $type; // should be protected ?
  public $bundle;

  function __construct($bundle,$type = null) {
    $this->efq = new EntityFieldQuery();
    // if type null, try to find it, otherwise throw an exceptional exception
    if (empty($type)) {
      $type = 'node';
    }
    $this->type = $type;
    $this->bundle = $bundle;
    $this->efq->entityCondition('entity_type', $this->type)
    ->entityCondition('bundle', $this->bundle);
  }

  public function fieldCo($fieldname, $val, $op = null, $colname = null) {
    // find the column name for us 'column name to be determined from metadata'
    if(empty($op))
      $op = "=";
    $this->efq->fieldCondition($fieldname, $colname , $val, $op);
  }

  public function getResult() {
    $this->result = $this->efq->execute();
    if ( $this->result && isset($this->result[$this->type]) && $this->result[$this->type]) {
      return $this->result[$this->type];
    } else {
      return false;
    }
  }

  public function getAllIDs() {
    $result = $this->getResult();
    if ($result) {
      return array_keys($result);
    } else {
      return false;
    }
  }

  public function getEntities() {
    $ids = $this->getAllIDs();
    if ($ids) {
      return entity_load($this->type, $ids);
    } else {
      return false;
    }

  }

  public function getOneID() {
    $ids = $this->getAllIDs();
    if ($ids) {
      return end($ids);
    } else {
      return false;
    }

  }

  public function getOneWr() {
    $id = $this->getOneID();
    if ($id) {
      return ldh_ew($id, $this->type);
    } else {
      return false;
    }
  }
}
